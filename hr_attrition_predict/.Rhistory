HR_emp_att %>% filter(Attrition==1) %>%ggplot(mapping = aes(x = MonthlyIncome)) + geom_histogram(aes(fill = Attrition), bins=20)+
labs(x="Monthlt Income", y="Number Attriation")+ ggtitle("Attrition in regards to Monthly Income")
ggplot(HR_emp_att, aes(y = YearsSinceLastPromotion, x = YearsAtCompany, colour = OverTime)) + geom_jitter(size = 1, alpha = 0.7) +
geom_smooth(method = "gam") + facet_wrap(~ Attrition) + ggtitle("Attrition") + scale_colour_manual(values = c("#386cb0","#fdb462")) +
theme(plot.title = element_text(hjust = 0.5))
g1 <-HR_emp_att %>%ggplot(aes(x = OverTime, group = Attrition)) + geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",alpha = 0.7) + geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",vjust = 0.3) +labs(y = "Percentage", fill= "OverTime") +facet_grid(~Attrition) +
theme_minimal()+ theme(legend.position = "none", plot.title = element_text(hjust = 0.3)) +
ggtitle("Attrition")
g2 <-HR_emp_att %>% group_by(OverTime, Attrition) %>% tally() %>% ggplot(aes(x = OverTime, y = n,fill=Attrition)) +
geom_bar(stat = "identity") + theme_minimal()+ geom_text(aes(label = n), vjust = -0.3, position = position_dodge(0.9))+
labs(x="Over time", y="Number Attriation")+ggtitle("Attrition in regards to Over time")
grid.arrange(g1,g2)
g1<-HR_emp_att%>%ggplot(aes(x = WorkLifeBalance, group = Attrition)) + geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count", alpha = 0.7) +geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count", vjust = -.5) +labs(y = "Percentage", fill= "WorkLifeBalance") +
facet_grid(~Attrition) + theme_minimal()+ theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
g2<- HR_emp_att %>% group_by(WorkLifeBalance, Attrition) %>% tally() %>% ggplot(aes(x = WorkLifeBalance, y = n,fill=Attrition)) +
geom_bar(stat = "identity") + theme_minimal()+geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))+
labs(x="  Work Life Balance", y="Number Attriation") + ggtitle("Attrition in regards to  Work Life Balance")
grid.arrange(g1,g2)
ggplot(HR_emp_att,aes(x= WorkLifeBalance, y=DistanceFromHome, group = WorkLifeBalance, fill = WorkLifeBalance)) +
geom_boxplot(alpha=0.7) + theme(legend.position="none") + facet_wrap(~ Attrition) + ggtitle("Attrition") +
theme(plot.title = element_text(hjust = 0.5))
HR_emp_att %>% group_by(Attrition) %>% tally() %>%ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") + theme_minimal()+ labs(x="Attrition", y="Count of Attriation")+
ggtitle("Attrition")+ geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
rfData <- HR_emp_att
HR_emp_att %>% group_by(Attrition) %>% tally() %>%ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") + theme_minimal()+ labs(x="Attrition", y="Count of Attriation")+
ggtitle("Attrition")+ geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
rfData <- HR_emp_att
set.seed(123)
RFRaw.test.Data <- read.csv('pfm_test.csv')
RFRaw.train.Data <- HR_emp_att
RFRaw.test.Data <- read.csv('pfm_test.csv')
Raw.rf.model <- randomForest(Attrition~.,RFRaw.train.Data, importance=TRUE,ntree=1000)
varImpPlot(Raw.rf.model)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
str(RFRaw.train.Data)
str(RFRaw.test.Data)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
Dim(RFRaw.test.Data)
dim(RFRaw.test.Data)
head(RFRaw.test.Data)
Dim(RFRaw.test.Data)
dim(RFRaw.test.Data)
dim(RFRaw.train.Data)
dim(HR_emp_att0
)
dim(HR_emp_att)
dplyr::combine(RFRaw.test.Data,RFRaw.train.Data)
dim(dplyr::combine(RFRaw.test.Data,RFRaw.train.Data))
dim(dplyr::combine(list(RFRaw.test.Data,RFRaw.train.Data)))
dim(dplyr::combine(RFRaw.test.Data,RFRaw.train.Data))[:4]
dim(dplyr::combine(RFRaw.test.Data,RFRaw.train.Data))[1:4]
dplyr::combine(RFRaw.test.Data,RFRaw.train.Data)[1:4]
dplyr::bind_rows(RFRaw.test.Data,RFRaw.train.Data)[1:4]
HR_emp_att$EmployeeCount
HR_emp_att$EmployeeCounte
RFRaw.test.Data$EmployeeNumber<- NULL
RFRaw.test.Data$StandardHours <- NULL
RFRaw.test.Data$Over18 <- NULL
RFRaw.test.Data$EmployeeCount <- NULL
cat("Data Set has ",dim(HR_emp_att)[1], " Rows and ", dim(HR_emp_att)[2], " Columns" )
# There are some attributes that are categorical, but in the data set are integer. We have to change them to categorical.
RFRaw.test.Data$Education <- factor(RFRaw.test.Data$Education)
RFRaw.test.Data$EnvironmentSatisfaction <- factor(RFRaw.test.Data$EnvironmentSatisfaction)
RFRaw.test.Data$JobInvolvement <- factor(RFRaw.test.Data$JobInvolvement)
RFRaw.test.Data$JobLevel <- factor(RFRaw.test.Data$JobLevel)
RFRaw.test.Data$JobSatisfaction <- factor(RFRaw.test.Data$JobSatisfaction)
RFRaw.test.Data$PerformanceRating <- factor(RFRaw.test.Data$PerformanceRating)
RFRaw.test.Data$RelationshipSatisfaction <- factor(RFRaw.test.Data$RelationshipSatisfaction)
RFRaw.test.Data$StockOptionLevel <- factor(RFRaw.test.Data$StockOptionLevel)
RFRaw.test.Data$WorkLifeBalance <- factor(RFRaw.test.Data$WorkLifeBalance)
# Building the model
Raw.rf.model <- randomForest(Attrition~.,RFRaw.train.Data, importance=TRUE,ntree=1000)
varImpPlot(Raw.rf.model)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
confusionMatrix(RFRaw.test.Data$Attrition, Raw.rf.prd)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
Raw.rf.prd
str(Raw.rf.prd)
Raw.rf.prd>.5
sum(Raw.rf.prd>.5)
RFRaw.test.Data$Attrition
rfData <- HR_emp_att
set.seed(123)
indexes = sample(1:nrow(rfData), size=0.8*nrow(rfData))
RFRaw.train.Data <- rfData[indexes,]
RFRaw.test.Data <- rfData[-indexes,]
dim(RFRaw.test.Data)
Raw.rf.model <- randomForest(Attrition~.,RFRaw.train.Data, importance=TRUE,ntree=1000)
varImpPlot(Raw.rf.model)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
confusionMatrix(RFRaw.test.Data$Attrition, Raw.rf.prd)
RFRaw.test.Data$Attrition
Raw.rf.prd
Raw.rf.prd>0.4
sum(Raw.rf.prd>0.4)
sapply(Raw.rf.prd,function(x) if x>0.4 then 1 else 0)
sapply(Raw.rf.prd,function(x) if (x>0.4) then 1 else 0)
lapply(Raw.rf.prd,function(x) if (x>0.4) then 1 else 0)
lapply(Raw.rf.prd, function(x) ifelse(x>0.4,1,0))
sapply(Raw.rf.prd, function(x) ifelse(x>0.4,1,0))
Raw.rf.prd <- sapply(Raw.rf.prd, function(x) ifelse(x>0.4,1,0))
confusionMatrix(RFRaw.test.Data$Attrition, Raw.rf.prd)
ggplot(data=HR_emp_att, aes(HR_emp_att$Age)) + geom_histogram(breaks=seq(20, 50, by=2),
col="red",aes(fill=..count..))+ labs(x="Age", y="Count")+ scale_fill_gradient("Count", low="black", high="red")
HR_emp_att$AgeGroup <- as.factor(ifelse(HR_emp_att$Age<=28,"Young", ifelse(HR_emp_att$Age<=38,"Middle-Age","Adult")))
table(HR_emp_att$AgeGroup)
HR_emp_att$Tot.Satisfaction <-
as.numeric(HR_emp_att$EnvironmentSatisfaction)+
as.numeric(HR_emp_att$JobInvolvement)+
as.numeric(HR_emp_att$JobSatisfaction)+
as.numeric(HR_emp_att$RelationshipSatisfaction)+
as.numeric(HR_emp_att$WorkLifeBalance)
HR_emp_att$Tot.Satisfaction <-
as.numeric(HR_emp_att$EnvironmentSatisfaction)+
as.numeric(HR_emp_att$JobInvolvement)+
as.numeric(HR_emp_att$JobSatisfaction)+
as.numeric(HR_emp_att$RelationshipSatisfaction)+
as.numeric(HR_emp_att$WorkLifeBalance)
summary(HR_emp_att$Tot.Satisfaction)
$Age
ggplot(data=HR_emp_att, aes(HR_emp_att$Age)) + geom_histogram(breaks=seq(20, 50, by=2),
col="red",aes(fill=..count..))+ labs(x="Age", y="Count")+ scale_fill_gradient("Count", low="black", high="red")
ggplot(attrition_edufield, aes(x = EducationField,y = count,fill = EducationField, colour = EducationField))+ geom_bar(stat = "identity")  + facet_wrap(~Attrition)
ggplot(HR_emp_att, aes(x = YearsAtCompany, fill = Attrition, colour = Attrition, alpha = .3)) + geom_density()
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition, alpha = .3)) + geom_density() +
,
labs(x="Age", y="Count")+ scale_fill_gradient("Count", low="black", high="red")
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition, alpha = .3)) + geom_density() +
labs(x="Age", y="Count")+ scale_fill_gradient("Count", low="black", high="red")
a = .3)) + geom_density() +
labs(x="Age", y="Count")
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition, alpha = .3)) + geom_density() +
labs(x="Age", y="Count")
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition, alpha = .5)) + geom_density() +
labs(x="Age", y="Count")
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition)) + geom_density() +
labs(x="Age", y="Count")
g1 <- ggplot(HR_emp_att, aes(x = MonthlyIncome, fill = Attrition)) + geom_density(alpha = 0.7) + scale_fill_manual(values = c("#386cb0","#fdb462"))
g1 <- ggplot(HR_emp_att, aes(x = MonthlyIncome, fill = Attrition)) + geom_density(alpha = 0.7) + scale_fill_manual(values = c("#386cb0","#fdb462"))
g2<-ggplot(HR_emp_att, aes(x =  log(MonthlyIncome), fill = Attrition,colour = Attrition, alpha = .3)) + geom_density() + ggtitle("")
grid.arrange(g1, g2, ncol = 1, nrow = 2)
g2<-ggplot(HR_emp_att, aes(x =  log(MonthlyIncome), fill = Attrition,colour = Attrition)) + geom_density( alpha = .3) + ggtitle("")
grid.arrange(g1, g2, ncol = 1, nrow = 2)
ggplot(HR_emp_att, aes(x = YearsAtCompany, fill = Attrition, colour = Attrition)) + geom_density( alpha = .3)
attrition_edufield <- HR_emp_att %>%select(Attrition, EducationField) %>%group_by(Attrition, EducationField) %>% summarise(count = n()) + facet_wrap(~Attrition)
datatable(attrition_edufield)
ggplot(HR_emp_att, aes(x = YearsAtCompany, fill = Attrition, colour = Attrition)) + geom_density( alpha = .3)
attrition_edufield <- HR_emp_att %>%select(Attrition, EducationField) %>%group_by(Attrition, EducationField) %>% summarise(count = n()) + facet_wrap(~Attrition)
datatable(attrition_edufield)
ggplot(attrition_edufield, aes(x = EducationField,y = count,fill = EducationField, colour = EducationField))+ geom_bar(stat = "identity")  + facet_wrap(~Attrition)
datatable(attrition_edufield)
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition)) + geom_density() +
labs(x="Age", y="Count")
ggplot(HR_emp_att, aes(x = Tot.Satisfaction, fill = AgeGroup, colour = Attrition)) + geom_density() +
labs(x="Tot.Satisfaction", y="%")
HR_emp_att$YearsEducation <-  ifelse(HR_emp_att$Education==1,10,ifelse(HR_emp_att$Education==2,12,
ifelse(HR_emp_att$Education==3,16,ifelse(HR_emp_att$Education==4,18,22))))
table(HR_emp_att$YearsEducation)
HR_emp_att$IncomeLevel <- as.factor(ifelse(HR_emp_att$MonthlyIncome<ave(HR_emp_att$MonthlyIncome),"Low","High"))
ave(HR_emp_att$MonthlyIncome)
mean(HR_emp_att$MonthlyIncome)
HR_emp_att$IncomeLevel <- as.factor(ifelse(HR_emp_att$MonthlyIncome<mean(HR_emp_att$MonthlyIncome),"Low","High"))
table(HR_emp_att$IncomeLevel)
corrplot(cor(sapply(HR_emp_att,as.integer)),method = "pie")
rfData <- HR_emp_att
set.seed(123)
indexes = sample(1:nrow(rfData), size=0.8*nrow(rfData))
RFtrain.Data <- rfData[indexes,]
RFtest.Data <- rfData[-indexes,]
rf.model <- randomForest(Attrition~.,RFtrain.Data, importance=TRUE,ntree=500)
varImpPlot(rf.model)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.Plot<- plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
svmData <- HR_emp_att
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.5,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.3,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.5,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.1,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.1,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.3,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.4,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.Plot<- plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
svmData <- HR_emp_att
set.seed(123)
indexes = sample(1:nrow(svmData), size=0.8*nrow(svmData))
SVMtrain.Data <- svmData[indexes,]
SVMtest.Data <- svmData[-indexes,]
tuned <- tune(svm,factor(Attrition)~.,data = SVMtrain.Data)
svm,factor(Attrition)
tuned <- tune(svm,factor(Attrition)~.,data = SVMtrain.Data)
svm.model <- svm(SVMtrain.Data$Attrition~., data=SVMtrain.Data
,type="C-classification", gamma=tuned$best.model$gamma
,cost=tuned$best.model$cost
,kernel="radial")
svm.prd <- predict(svm.model,newdata=SVMtest.Data)
confusionMatrix(svm.prd,SVMtest.Data$Attrition)
svm.plot <-plot.roc (as.numeric(SVMtest.Data$Attrition), as.numeric(svm.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
DtData <- HR_emp_att
set.seed(123)
indexes = sample(1:nrow(DtData), size=0.8*nrow(DtData))
DTtrain.Data <- DtData[indexes,]
DTtest.Data <- DtData[-indexes,]
dtree.model <- tree::tree (Attrition ~., data = DTtrain.Data)
plot(dtree.model)
text(dtree.model, all = T)
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
confusionMatrix(dtree.prd,DTtest.Data$Attrition)
dtree.plot <- plot.roc (as.numeric(DTtest.Data$Attrition), as.numeric(dtree.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
dtree.model <- tree::tree (Attrition ~., data = DTtrain.Data)
library(dtree)
DtData <- HR_emp_att
set.seed(123)
indexes = sample(1:nrow(DtData), size=0.8*nrow(DtData))
DTtrain.Data <- DtData[indexes,]
DTtest.Data <- DtData[-indexes,]
dtree.model <- tree::tree (Attrition ~., data = DTtrain.Data)
install.packages("tree")
dtree.model <- tree::tree (Attrition ~., data = DTtrain.Data)
plot(dtree.model)
text(dtree.model, all = T)
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
confusionMatrix(dtree.prd,DTtest.Data$Attrition)
text(dtree.model, all = T)
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
confusionMatrix(dtree.prd,DTtest.Data$Attrition)
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
set.seed(123)
xgbData <- HR_emp_att
indexes <- sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
XGBtrain.Data <- xgbData[indexes,]
XGBtest.Data <- xgbData[-indexes,]
formula = Attrition~.
xgbGrid <- expand.grid(nrounds = 50,
max_depth = 12,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model <- train(formula, data = XGBtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
)
xgbGrid <- expand.grid(nrounds = 50,
max_depth = 12,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model <- train(formula, data = XGBtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
)
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 50,
max_depth = 12,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model <- train(formula, data = XGBtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
XGB.prd <- predict(XGB.model,XGBtest.Data)
confusionMatrix(XGB.prd, XGBtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
XGB.prd <- predict(XGB.model,XGBtest.Data)
confusionMatrix(XGB.prd, XGBtest.Data$Attrition)
XGB.prd <- predict(XGB.model,XGBtest.Data)
XGB.prd <- predict(XGB.model,XGBtest.Data)
XGB.prd <- sapply(XGB.prd , function(x) ifelse(x>.4,1,0))
confusionMatrix(XGB.prd, XGBtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
Classcount = table(HR_emp_att$Attrition)
Classcount = table(HR_emp_att$Attrition)
Classcount
over = ( (0.6 * max(Classcount)) - min(Classcount) ) / min(Classcount)
under = (0.4 * max(Classcount)) / (min(Classcount) * over)
over = round(over, 1) * 100
under = round(under, 1) * 100
BalancedData = SMOTE(Attrition~., HR_emp_att, perc.over = over, k = 5, perc.under = under)
BalancedData %>%
group_by(Attrition) %>%
tally() %>%
ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Attrition", y="Count of Attriation")+
ggtitle("Attrition")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
set.seed(123)
RF_Bal_Data <- BalancedData
indexes = sample(1:nrow(RF_Bal_Data), size=0.8*nrow(RF_Bal_Data))
RF_BLtrain.Data <- RF_Bal_Data[indexes,]
RF_BLtest.Data <- RF_Bal_Data[-indexes,]
RF_Bal_Data <- BalancedData
BalancedData %>%
group_by(Attrition) %>%
tally() %>%
ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Attrition", y="Count of Attriation")+
ggtitle("Attrition")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
BalancedData = SMOTE(Attrition~., HR_emp_att, perc.over = over, k = 5, perc.under = under)
BalancedData = SMOTE(factor(Attrition)~., HR_emp_att, perc.over = over, k = 5, perc.under = under)
under
over
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
importance <- varImp(XGB.model)
importance
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
rank(desc(importance))
desc(Importance)
varImportance
desc(varImportance$Importance)
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
NewXGB.prd <- predict(XGB.model,BLtest.Data)
# Now we try to run again Random Forest with the Balanced Data
set.seed(123)
RF_Bal_Data <- BalancedData
indexes = sample(1:nrow(RF_Bal_Data), size=0.8*nrow(RF_Bal_Data))
RF_BLtrain.Data <- RF_Bal_Data[indexes,]
RF_BLtest.Data <- RF_Bal_Data[-indexes,]
RF_Bal_Data <- BalancedData
BalancedData = SMOTE(factor(Attrition)~., HR_emp_att, perc.over = over, k = 5, perc.under = under)
HR_emp_att
dim(HR_emp_att)
BalancedData = SMOTE(factor(Attrition)~., HR_emp_att, perc.over =
over, k = 5, perc.under = under)
class(HR_emp_att$Attrition)
HR_emp_att$Attrition <- factor(HR_emp_att$Attrition)
BalancedData = SMOTE(Attrition~., HR_emp_att, perc.over =
over, k = 5, perc.under = under)
BalancedData %>%
group_by(Attrition) %>%
tally() %>%
ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Attrition", y="Count of Attriation")+
ggtitle("Attrition")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
set.seed(123)
RF_Bal_Data <- BalancedData
indexes = sample(1:nrow(RF_Bal_Data), size=0.8*nrow(RF_Bal_Data))
RF_BLtrain.Data <- RF_Bal_Data[indexes,]
RF_BLtest.Data <- RF_Bal_Data[-indexes,]
RF_BAL.model <- randomForest(Attrition~.,RF_BLtrain.Data, importance=TRUE,ntree=500)
varImpPlot(RF_BAL.model)
RF_BAL.prd <- predict(RF_BAL.model, newdata = RF_BLtest.Data)
confusionMatrix(RF_BLtest.Data$Attrition, RF_BAL.prd)
RF_BAL.Plot<- plot.roc (as.numeric(RF_BLtest.Data$Attrition), as.numeric(RF_BAL.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
set.seed(123)
xgbData <- BalancedData
indexes = sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
BLtrain.Data <- xgbData[indexes,]
BLtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
NewXGB.prd <- predict(XGB.model,BLtest.Data)
NewXGB.prd
histogram(NewXGB.prd )
NewXGB.prd <- sapply(NewXGB.prd , function(x) ifelse(x>.4,1,0))
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
NewXGB.prd <- sapply(NewXGB.prd , function(x) ifelse(x>.5,1,0))
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
XGB.plot
Congratulation !
Excelent Results:
Accuracy : more than 90% !!!!!
AUC about 0.89
XGB.plot <- plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
XGB.plot
XGB.plot()
XGB.plot
plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
par(mfrow=c(3,3))
plot.roc (as.numeric(RFRaw.test.Data$Attrition), as.numeric(Raw.rf.prd), main="Raw Data Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen4")
plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd), main=" NEW Data Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen")
RF_BAL.Plot<- plot.roc (as.numeric(RF_BLtest.Data$Attrition), as.numeric(RF_BAL.prd),main="Balanced Data Random Forest",lwd=2, type="b", print.auc=TRUE,col ="blue")
plot.roc (as.numeric(DTtest.Data$Attrition), as.numeric(dtree.prd), main="DTree",lwd=2, type="b", print.auc=TRUE, col ="brown")
plot.roc (as.numeric(SVMtest.Data$Attrition), as.numeric(svm.prd),main="SVM",lwd=2, type="b", print.auc=TRUE, col ="red")
plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),main="XGBoost",lwd=2, type="b", print.auc=TRUE, col ="blue")
plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),main=" Balanced Data XGBoost",lwd=2, type="b", print.auc=TRUE, col ="green")
corrplot(cor(sapply(HR_emp_att,as.integer)),method = "pie")
table(HR_emp_att$YearsEducation)
table(HR_emp_att$Education)
HR_emp_att$YearsEducation <-  ifelse(HR_emp_att$Education==1,10,ifelse(HR_emp_att$Education==2,12,
ifelse(HR_emp_att$Education==3,16,ifelse(HR_emp_att$Education==4,18,22))))
)
table(HR_emp_att$Education)
HR_emp_att$YearsEducation <-  ifelse(HR_emp_att$Education==1,10,ifelse(HR_emp_att$Education==2,12,
ifelse(HR_emp_att$Education==3,16,ifelse(HR_emp_att$Education==4,18,22))))
table(HR_emp_att$YearsEducation)
HR_emp_att$IncomeLevel <- as.factor(ifelse(HR_emp_att$MonthlyIncome<mean(HR_emp_att$MonthlyIncome),"Low","High"))
table(HR_emp_att$IncomeLevel)
corrplot(cor(sapply(HR_emp_att,as.integer)),method = "pie")
HR_emp_att$Education <- NULL
HR_emp_att$Age <- NULL
HR_emp_att$JobLevel<- NULL
HR_emp_att$MonthlyIncome<- NULL
set.seed(123)
indexes = sample(1:nrow(rfData), size=0.8*nrow(rfData))
RFtrain.Data <- rfData[indexes,]
RFtest.Data <- rfData[-indexes,]
rf.model <- randomForest(Attrition~.,RFtrain.Data, importance=TRUE,ntree=500)
varImpPlot(rf.model)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
rf.prd <- sapply(rf.prd,function(x) ifelse(x>0.4,1,0))
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.Plot<- plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
svmData <- HR_emp_att
